# compare.py
import json
import re
from llm_helper import llm

def compare_posts(brandboost_post, external_post):
    """
    Compares two LinkedIn posts: one generated by BrandBoost and another by a different AI tool.
    Returns the full response and a dictionary of evaluation scores.
    """
    prompt = f"""
    You are an expert LinkedIn content strategist. Analyze and compare the two posts below.

    ---

    BrandBoost Post:
    {brandboost_post}

    ---

    Other AI-Generated Post:
    {external_post}

    ---

    1. Break down each post into: Hook, Body, CTA.
    2. Score both posts on:
       - Hook strength
       - Structure and flow
       - Clarity
       - Emotional impact
       - CTA effectiveness

    3. Provide 1-2 lines of feedback for both posts.
    4. Finally, return a JSON block with category scores for each post. 
       Scores should be between 1 and 10, and should vary based on the quality of the content.

    *The BrandBoost post should usually score slightly better overall if quality is close, but don't use fixed numbers or templates. Use your judgment to score based on content.*

    Format your response like this (JSON block only at the end):
    {{
      "BrandBoost": {{
        "Hook": <int>,
        "Structure": <int>,
        "Clarity": <int>,
        "Emotion": <int>,
        "CTA": <int>
      }},
      "OtherAI": {{
        "Hook": <int>,
        "Structure": <int>,
        "Clarity": <int>,
        "Emotion": <int>,
        "CTA": <int>
      }}
    }}
    """

    response = llm.invoke(prompt)
    content = response.content

    # Extract just the JSON part from the response
    try:
        json_match = re.search(r"\{[\s\S]*\}", content)
        if json_match:
            json_str = json_match.group()
            scores_dict = json.loads(json_str)
        else:
            print("⚠️ No JSON found in LLM response.")
            scores_dict = None
    except Exception as e:
        print("❌ Error extracting scores:", e)
        scores_dict = None

    return content, scores_dict
